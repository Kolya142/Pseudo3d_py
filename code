import pygame
import sys
import math

 
pygame.init()
 
SCREEN_HEIGHT = 480
SCREEN_WIDTH = SCREEN_HEIGHT * 2
MAP_SIZE = 20
TILE_SIZE = ((SCREEN_WIDTH / 2) / MAP_SIZE)
MAX_DEPTH = int(MAP_SIZE * TILE_SIZE)
FOV = math.pi / 3
HALF_FOV = FOV / 2
CASTED_RAYS = int(120 / 2)
STEP_ANGLE = FOV / CASTED_RAYS
SCALE = (SCREEN_WIDTH / 2) / CASTED_RAYS
ligth_x = 250
ligth_y = 10
ligth_z = 210
ligth_dist = 5

player_x = (SCREEN_WIDTH / 2) / 2
player_y = (SCREEN_WIDTH / 2) / 2
player_angle = math.pi
 

MAP = (
     '####################'
     '#                  #'
     '#                  #'
     '#                  #'
     '#                  #'
     '#                  #'
     '#       #          #'
     '#                  #'
     '#                  #'
     '#                  #'
     '#                  #'
     '#            #     #'
     '#                  #'
     '#                  #'
     '#    #             #'
     '#                  #'
     '#                  #'
     '#                  #'
     '#             #    #'
     '#                  #'
     '####################'
)


 
win = pygame.display.set_mode((SCREEN_WIDTH,SCREEN_HEIGHT))
texture = pygame.image.load("texture.png").convert()
pygame.display.set_caption("3D GAME")
 
clock = pygame.time.Clock()
ms_x, ms_y = (SCREEN_WIDTH // 2, SCREEN_HEIGHT // 2)
pygame.mouse.set_visible(False)
def draw_map(): pass

def cast_rays():
    global depths
    global a_y
    global starts
    global colors
    start_angle = player_angle - FOV
    depths = []
    starts = []
    colors = []
    for i in range(1):
        for ray in range(CASTED_RAYS * 2):
            for depth in range(MAX_DEPTH):
                target_x = player_x - math.sin(start_angle) * depth
                target_y = player_y + math.cos(start_angle) * depth
                col = int(target_x / TILE_SIZE)
                row = int(target_y / TILE_SIZE)
                square = row * MAP_SIZE + col
                if not square < 0:
                    if MAP[square] == '#':
                        starts.append(start_angle)
                        depth_color = (max(target_x, ligth_x) - min(target_x, ligth_x)) + (max(0, ligth_y) - min(0, ligth_y)) + (max(target_y, ligth_z) - min(target_y, ligth_z))
                        color = int(MAP_SIZE ** 2 / (1 + depth_color * depth_color * 0.0001)) * ligth_dist

                        depth *= math.cos(player_angle - start_angle)
                        wall_height = 21000 / (depth + 0.0001)
                        colors.append(color)
                        if wall_height > SCREEN_HEIGHT: wall_height == SCREEN_HEIGHT
                        if color > 255: color = 255
                        depths.append(depth)
                        column = texture.subsurface(ray,0,ray * 2,10)
                        pygame.draw.rect(win,pygame.Color(color, color, color, color), (ray * SCALE,(SCREEN_HEIGHT / 2) - wall_height / 2 + a_y,SCALE,wall_height))
                        column = pygame.transform.scale(column,(SCALE,wall_height))
                        #win.blit(column, (ray * SCALE,(SCREEN_HEIGHT / 2) - wall_height / 2 + a_y))
                        break
            start_angle += STEP_ANGLE
 
forward = True
debug = False
a_y = 0
bird_x = 0
bird1 = pygame.image.load("bird1.png")
bird2 = pygame.image.load("bird2.png")
bird = bird2
while True:
    clock.tick(60)
    if bird == bird2: bird = bird1
    else: bird = bird2
    bird_x += 1
    if bird_x == SCREEN_WIDTH // 2: bird_x = 0 - SCREEN_WIDTH / 2
    # if player_x > (SCREEN_WIDTH / 2) or player_y > (SCREEN_WIDTH / 2) or player_x < 0 or player_y < 0:
        # player_x = (SCREEN_WIDTH / 2) / 2
        # player_y = (SCREEN_WIDTH / 2) / 2
    m_x, m_y = pygame.mouse.get_pos()
    if ms_y > m_y: 
        a_y += ms_y - m_y
        pygame.mouse.set_pos(ms_x, ms_y)
    if ms_y < m_y:
        a_y -= m_y - ms_y
        pygame.mouse.set_pos(ms_x, ms_y)
    if ms_x > m_x: 
        player_angle -= (ms_x - m_x) / 500
        pygame.mouse.set_pos(ms_x, ms_y)
    if ms_x < m_x: 
        player_angle += (m_x - ms_x) / 500
        pygame.mouse.set_pos(ms_x, ms_y)
    if a_y < -232: a_y = -232
    if a_y > 500: a_y = 500
    keys = pygame.key.get_pressed()
    for event in pygame.event.get():
      if event.type == pygame.QUIT or keys[pygame.K_ESCAPE]:
          pygame.quit()
          sys.exit(0)
          
    col = int(player_x / TILE_SIZE)
    row = int(player_y / TILE_SIZE)
 
    square = row * MAP_SIZE + col
    (player_y / TILE_SIZE) * MAP_SIZE + player_x / TILE_SIZE 
    if not square < 0:
        if MAP[square] == '#' or MAP[square] == "*":
            if forward == True:
                player_x -= -math.sin(player_angle) * 5
                player_y -= math.cos(player_angle) * 5
            else:
                player_x += -math.sin(player_angle) * 5
                player_y += math.cos(player_angle) * 5
 
     
          
    # pygame.draw.rect(win,(0,0,0),(0,0,SCREEN_HEIGHT,SCREEN_HEIGHT))
    
    win.fill(pygame.Color("blue"))
    pygame.draw.rect(win, (50,255,100), (0, SCREEN_HEIGHT / 2 + a_y, SCREEN_WIDTH, SCREEN_HEIGHT))
    win.blit(bird,(bird_x + 500 + math.sin(player_angle) * (SCREEN_WIDTH / 2) + player_x, -100 + a_y))
    cast_rays()

    if keys[pygame.K_w]:
        forward = True
        player_x += -math.sin(player_angle) * 5
        player_y += math.cos(player_angle) * 5
    if keys[pygame.K_s]:
        forward = False
        player_x -= -math.sin(player_angle) * 5
        player_y -= math.cos(player_angle) * 5
    if keys[pygame.K_F3]: debug = not debug
    font = pygame.font.SysFont('Monospace Regular', 30)
    textsurface = font.render("version:1.5", False, (100,255,0))
    win.blit(textsurface,(SCREEN_WIDTH / 2,0))
    if debug:
        for l in range(len(depths) - 1):
            target_x = player_x + math.sin(starts[l]) * depths[l]
            target_y = player_y - math.cos(starts[l]) * depths[l]
            if not depths[l] == MAX_DEPTH: pygame.draw.circle(win,(255,255,255),(target_x - 2.5,target_y - 2.5),5)
            pygame.draw.line(win,(255,200,100),(player_x, player_y), (target_x, target_y))
        pygame.draw.circle(win,(255,0,0),(player_x - 5,player_y - 5),10)
        x, y, a = str(player_y), str(player_x), str(player_angle)
        x1, y1, a1 = [], [], []
        x1 += x
        y1 += y
        a1 += a
        x3 = min(len(x1),len(y1),len(a1))
        if min(len(x1),len(y1),len(a1)) > 8: x3 = 8
        x, y, a = "", "", ""
        for i in range(x3): 
            x += x1[i]
            y += y1[i]
            a += a1[i]
        fps = str(int(clock.get_fps()))
        textsurface = font.render("fps:" + fps + ", x:" + x + ", y:" + y + ", a:" + a + ", a_y:" + str(a_y), False, (100,255,0))
        win.blit(textsurface,(0,0))
    pygame.draw.line(win, (200, 200, 200), (SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 - 10), (SCREEN_WIDTH / 2, SCREEN_HEIGHT / 2 + 10))
    pygame.draw.line(win, (200, 200, 200), (SCREEN_WIDTH / 2 - 10, SCREEN_HEIGHT / 2), (SCREEN_WIDTH / 2 + 10, SCREEN_HEIGHT / 2))
    pygame.display.flip()
